#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Python Desktop application using Tkinter to calculate BMI
Author: Reshma
"""

# importing tkinter
import tkinter as tk
from tkinter import messagebox

class Icons:
    app_icon = r"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"
class BmiCalculator:
    def __init__(self):
        self.root = tk.Tk()
        # Dimension of the application
        self.root.geometry("400x530")
        # Set the minimum width and height of the GUI
        self.root.minsize(width=400,height=530)
        # Set the maximum width and height of the GUI
        self.root.maxsize(width=400,height=530)
        # Title of the desktop app
        self.root.title("BMI Calculator")
        # Background color of the application root
        self.root.config(bg="#ccffff")
        self.logo_image = tk.PhotoImage(data=Icons.app_icon)
        #variables
        self.weight_var = tk.StringVar()
        self.height_var = tk.StringVar()
        # label
        self.label1 = tk.Label(self.root,text="Enter your height in cm",font=("Arial",16),bg="#ccffff")
        self.label1.pack(pady=27)
        # Getting height using Entry
        self.heightEntry = tk.Entry(self.root,textvariable=self.height_var,width=15,font=("Arial",16),bd=3)
        self.heightEntry.pack(pady=10)
        # label
        self.label2 = tk.Label(self.root, text="Enter your weight in kg", font=("Arial", 16),bg="#ccffff")
        self.label2.pack(pady=10)
        # Getting weight using Entry
        self.weightEntry = tk.Entry(self.root,textvariable=self.weight_var,width=15, font=("Arial", 16),bd=3)
        self.weightEntry.pack(pady=20)
        # Button to calculate BMI
        self.button = tk.Button(self.root,text="Calculate BMI",font=("Times New Roman",16),bg="black",fg="white",command=self.findBMI)
        self.button.pack(padx=30,pady=20)
        # label to display the calculated BMI
        self.bmiLabel = tk.Label(self.root,font=("Tahoma",15),bg="#ccffff")
        self.bmiLabel.pack(pady=7)
        # label to display BMI result
        self.result = tk.Label(self.root,font=("Tahoma",17),text="",height=2,width=36,bg="#ccffff")
        self.result.pack(padx=30,pady=5)
        self.root.iconphoto(True,self.logo_image)
        self.root.mainloop()

    # Function to check if given string is a valid decimal or float
    def isValidDecimal(self,strNum):
        if strNum.count(".") <= 1 and strNum.replace(".", "").isnumeric():
            return True
        return False

    # Function to calculate BMI based on inputted height and weight
    def findBMI(self):
        weight = self.weight_var.get()
        height = self.height_var.get()
        # When the height and weight are empty or filled with space
        if weight=="" or weight.isspace() or height=="" or height.isspace():
            self.bmiLabel.config(text="")
            self.result.config(text="Height and Weight cannot be empty",bg="brown",fg="white",font=("Tahoma",15))
        # when height and weight are input properly as numbers
        elif self.isValidDecimal(weight)==True and self.isValidDecimal(height)==True:
            # converted height in centimetre to metre
            heightMetre = float(height)/100
            if float(height)>=100 and (weight!=0.0 or weight!=0):
                # calculating bmi
                bmi = float("{:.2f}".format(float(weight)/heightMetre/heightMetre))
                # Displaying bmi through label 'bmiLabel'
                self.bmiLabel.config(text=f"BMI is {bmi}")
                # Category of BMI result
                if bmi<15:
                    self.result.config(text="Very severely underweight",bg="purple",fg="white",font=("Georgia"))
                elif bmi>=15 and bmi<16:
                    self.result.config(text="Severely underweight", bg="blue", fg="white",font=("Georgia"))
                elif bmi>=16 and bmi<18.5:
                    self.result.config(text="Underweight", bg="#3377ff", fg="black",font=("Georgia",18))
                elif bmi>=18.5 and bmi<=24.9:
                    self.result.config(text="Healthy", bg="green", fg="white",font=("Georgia",20))
                elif bmi>=25 and bmi<=29.9:
                    self.result.config(text="Overweight", bg="yellow", fg="black",font=("Georgia",20))
                elif bmi>=30 and bmi<40:
                    self.result.config(text="Obese", bg="orange", fg="black",font=("Georgia",20))
                elif bmi>=40:
                    self.result.config(text="Extremely Obese", bg="red", fg="white",font=("Cambria",23))
            elif heightMetre==0 or weight==0:
                self.bmiLabel.config(text="")
                self.result.config(text="Height and Weight cannot be 0", bg="red", font=("Arial", 15))
            else:
                # When entered height is less than 100
                self.bmiLabel.config(text="")
                self.result.config(text="", bg="#ccffff")
                messagebox.showinfo(title="Message",message="Invalid height and weight")
        else:
            # When the entered input in height and weight fields is not numbers
            self.bmiLabel.config(text="")
            self.result.config(text="Enter numbers only please",bg="red",font=("Arial",18))
# object created for the class 'BmiCalculator'
BmiCalculator()